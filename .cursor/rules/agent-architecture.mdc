---
description: 
globs: 
alwaysApply: true
---
# Agent Architecture

DeepSearchAgent implements two agent paradigms: "CodeAct Agent" & normal "ReAct Agent". Version 0.2.4.dev introduces comprehensive enhancements to both agent types with a focus on text chunking, prompt organization, and planning capabilities.

## Architecture Overview

The codebase implements a dual-agent architecture pattern:

1. **CodeAct Agent**: Generates and executes Python code to perform research actions
2. **ReAct Agent**: Uses structured JSON for tool calling with explicit reasoning steps

Both agent types share common tools but differ in how they invoke these tools and process the results. The architecture includes a sophisticated template system and state management across both paradigms.

## CodeAct Agent Implementation

[codact_agent.py](mdc:src/agents/codact_agent.py) implements the Code Execution paradigm:

- Based on `smolagents.CodeAgent` - generates executable Python code to perform actions
- Uses `create_codact_agent()` factory function for agent initialization
- Extends the base smolagents prompt templates with custom extensions
- Maintains persistent variables between execution steps for state management
- Implements sophisticated planning at regular intervals (default every 4 steps)
- Streaming support through optional `StreamingCodeAgent` wrapper

### Key Technical Features:

- **Template Merging System**: Uses `merge_prompt_templates()` to combine base templates from smolagents with custom extensions
- **Structured State Management**: Maintains global variables (`visited_urls`, `search_queries`, `key_findings`, etc.)
- **Authorized Imports Management**: Carefully controls which Python modules can be used in the execution environment
- **Tool Integration**: Provides direct access to tools as callable Python functions
- **Failure Handling**: Implements robust error checks and safe access patterns for tools and variables
- **Periodic Planning**: Reassesses strategy at configurable intervals via `planning_interval` parameter

## ReAct Agent Implementation

[agent.py](mdc:src/agents/agent.py) implements the Reasoning + Acting paradigm:

- Based on `smolagents.ToolCallingAgent` - uses structured tool calling via JSON
- Uses `create_react_agent()` factory function for agent initialization
- Uses complete `PromptTemplates` structure for all agent interaction
- Implements explicit reasoning (Thought) before each tool call (Action)
- Supports periodic planning via `planning_interval` parameter (default 7 steps)
- Streaming via optional `StreamingReactAgent` wrapper

### Key Technical Features:

- **JSON-based Tool Calls**: Uses structured JSON format for tool invocation
- **Explicit Reasoning Traces**: Records thought process before each action
- **State Tracking**: Maintains state through step memory rather than variables
- **Tool Integration**: Consistent tool interface with both agent paradigms
- **Standardized Prompt Structure**: Uses comprehensive PromptTemplates system
- **Periodic Planning**: Reassesses strategy at regular intervals via `planning_interval`

## Prompt Template System

The [prompt_templates](mdc:src/agents/prompt_templates) directory contains a modular prompt template system:

- **[codact_prompts.py](mdc:src/agents/prompt_templates/codact_prompts.py)**: Contains:
  - `CODACT_SYSTEM_EXTENSION`: System prompt extension for CodeAct agent
  - `PLANNING_TEMPLATES`: Initial and update planning prompts
  - `FINAL_ANSWER_EXTENSION`: Final answer generation formats
  - `MANAGED_AGENT_TEMPLATES`: Agent team coordination patterns
  - `merge_prompt_templates()`: Function to merge with smolagents base templates

- **[react_prompts.py](mdc:src/agents/prompt_templates/react_prompts.py)**: Contains:
  - Complete `REACT_PROMPT` structures using smolagents `PromptTemplates` class
  - System prompts, tool descriptions and examples
  - Workflow explanations and best practices
  - Planning templates for strategic assessment
  - Final answer formatting requirements

- **[__init__.py](mdc:src/agents/prompt_templates/__init__.py)**: Exports the prompt components for both agent types

## Text Chunking System

- **[chunk.py](mdc:src/agents/tools/chunk.py)**: Agent tool interface utilizing Jina AI Segmenter
  - Implements `ChunkTextTool` class inheriting from `smolagents.Tool`
  - Provides consistent interface across both agent paradigms
  - Passes chunking requests to the core segmenter implementation

- **[segmenter.py](mdc:src/agents/core/chunk/segmenter.py)**: Core segmentation implementation
  - `JinaAISegmenter` class: Primary implementation using Jina AI Segment API
  - Provides both synchronous and asynchronous interfaces
  - Implements robust error handling and retry mechanisms
  - Includes batch processing capability for multiple texts
  - `Chunker` wrapper class: Maintains backward compatibility with original interface

## Streaming Architecture

### ⚠️ Important Note: Streaming Functionality Not Recommended
- Current streaming implementation has known issues and stability concerns
- **Developers and users are advised not to enable streaming mode** until future optimizations
- Set `enable_streaming` parameter to `false` in `config.toml` for both agent types

### Streaming Components

- **@StreamingReactAgent**: Extends the standard ToolCallingAgent
  - Streams thinking, tool calls, and observations in real-time
  - Maintains consistent JSON format for tool calling
  - Integrates with CLI rendering system for formatted output

- **@StreamingCodeAgent**: Extends the standard CodeAgent
  - Uses standard execution for code steps
  - Only streams the final answer generation, not intermediate steps
  - Maintains full state management throughout execution

- **@StreamingLiteLLMModel**: Extends LiteLLMModel
  - Provides token-by-token streaming for model responses
  - Compatible with both agent paradigms

- **Common Streaming Flow**:
  1. User query received by CLI or API
  2. Agent processes using appropriate reasoning steps
  3. For streaming mode: Output formatted with markers (Thinking, Action, Observation)
  4. For non-streaming mode: Only final answer returned after completion

## Tool Interface System

Tools are consistently defined across both agent paradigms:

- **[tools/__init__.py](mdc:src/agents/tools/__init__.py)**: Exports all tools with consistent naming
  - ReAct agent receives tool instances and calls them through Action JSON
  - CodeAct agent accesses the same tool instances as direct Python functions
  - Each tool inherits from `smolagents.Tool` base class

- **Common Tool Structure**:
  - Name, description, and input/output specifications
  - `forward()` method implementing the core functionality
  - CLI integration for rich output rendering
  - Error handling and fallback mechanisms

## State Management

Both agent types maintain consistent state tracking with different approaches:

- **CodeAct State**: Uses persistent Python variables between execution steps
  - Variables include: `visited_urls`, `search_queries`, `key_findings`, etc.
  - State maintained across the Python execution environment
  - Safe access patterns through try/except blocks

- **ReAct State**: Managed through agent's internal state dictionary
  - State initialized with same structure as CodeAct
  - State referenced through agent's reasoning process
  - Updates tracked as part of the agent's execution history

## Planning Mechanism

Both agent types implement periodic planning for strategic reassessment:

- **CodeAct Planning**: Every `planning_interval` steps (default: 4)
  - Planning executed through specialized templates
  - Evaluates progress and adjusts search strategy
  - Maintains structured fact assessment and next steps

- **ReAct Planning**: Every `planning_interval` steps (default: 7)
  - Planning uses similar structured templates
  - Explicitly tracks discovered facts and remaining questions
  - Formulates focused next steps based on current progress

## CLI Integration

The CLI interface has been enhanced to support both agent types:

- Renders structured JSON/Markdown output with formatting
- Displays progress indicators and statistics
- Handles errors gracefully with detailed diagnostics
- Provides consistent interface across agent paradigms
- Optimized logging and configuration options
